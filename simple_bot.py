#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π Telegram –±–æ—Ç —Å Gemini AI
–î–ª—è –∑–∞–ø—É—Å–∫–∞ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–º –ü–ö
"""

import asyncio
import logging
import os
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from google import genai  # type: ignore

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á–∏
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–π
if not TELEGRAM_BOT_TOKEN:
    print("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")
    print("–î–æ–±–∞–≤—å—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ .env —Ñ–∞–π–ª:")
    print("TELEGRAM_BOT_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω_–∑–¥–µ—Å—å")
    exit(1)

if not GEMINI_API_KEY:
    print("‚ùå GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")
    print("–î–æ–±–∞–≤—å—Ç–µ –≤–∞—à API –∫–ª—é—á Gemini –≤ .env —Ñ–∞–π–ª:")
    print("GEMINI_API_KEY=–≤–∞—à_–∫–ª—é—á_–∑–¥–µ—Å—å")
    exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Gemini –∫–ª–∏–µ–Ω—Ç
gemini_client = genai.Client(api_key=GEMINI_API_KEY)

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    if not update.message:
        return
    user_name = update.effective_user.first_name if update.effective_user else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    welcome_message = (
        f"–ü—Ä–∏–≤–µ—Ç, {user_name}! üëã\n\n"
        "–Ø AI-–±–æ—Ç –Ω–∞ –±–∞–∑–µ Google Gemini. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å, –∏ —è –æ—Ç–≤–µ—á—É!\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
        "/help - –ü–æ–º–æ—â—å\n"
        "/analyze [—Ç–µ–∫—Å—Ç] - –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞"
    )
    await update.message.reply_text(welcome_message)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
    if not update.message:
        return
    help_message = (
        "ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "/analyze [—Ç–µ–∫—Å—Ç] - –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ—Ç–≤–µ—á—É —Å –ø–æ–º–æ—â—å—é AI!"
    )
    await update.message.reply_text(help_message)

async def analyze_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /analyze"""
    if not update.message:
        return
    if not context.args:
        await update.message.reply_text(
            "–£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.\n–ü—Ä–∏–º–µ—Ä: /analyze –í–∞—à —Ç–µ–∫—Å—Ç"
        )
        return

    text_to_analyze = " ".join(context.args)
    analyzing_message = await update.message.reply_text("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é...")
    
    try:
        prompt = f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –∏ –¥–∞–π –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º:\n\n{text_to_analyze}"
        response = gemini_client.models.generate_content(
            model="gemini-2.5-flash",
            contents=prompt
        )
        
        analysis = response.text or "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç."
        await analyzing_message.edit_text(f"üìä –ê–Ω–∞–ª–∏–∑:\n\n{analysis}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        await analyzing_message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–µ–∫—Å—Ç–∞.")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if not update.message or not update.message.text:
        return
        
    user_message = update.message.text
    user_name = update.effective_user.first_name if update.effective_user else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_name}: {user_message[:50]}...")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –ø–µ—á–∞—Ç–∞–µ–º
    if update.effective_chat:
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è Gemini
        prompt = (
            f"–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. "
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–æ–≤—É—Ç {user_name}.\n\n"
            f"–í–æ–ø—Ä–æ—Å: {user_message}"
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç Gemini
        response = gemini_client.models.generate_content(
            model="gemini-2.5-flash",
            contents=prompt
        )
        
        ai_response = response.text or "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —Å–º–æ–≥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç."
        await update.message.reply_text(ai_response)
        
        logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_name}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("analyze", analyze_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    print("üì± –û–∂–∏–¥–∞—é —Å–æ–æ–±—â–µ–Ω–∏–π...")
    print("–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        application.run_polling()
    except KeyboardInterrupt:
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        print("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    main()